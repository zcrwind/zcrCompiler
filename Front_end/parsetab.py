
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSINT_NUMBER REAL_NUMBER ID PLUS MINUS TIMES DIVIDE ASSIGNMENT SEMICOLON COLON COMMA EQ LT LE GT GE NE LPAREN RPAREN LBRAC RBRAC LLAVEI LLAVED ENDPOINT DIGSEQ GOTO DOTDOT PROGRAM BEGIN END VAR IF THEN ELSE CASE OF WHILE DO AND OR NOT MOD ARRAY BOOLEAN FUNCTION RETURN INTEGER REAL CHAR STRING USES CONST TYPE FOR TO DOWNTOProgDef : PROGRAM ID SEMICOLON SubProg ENDPOINTSubProg : VarDef function_definition compound_statementVarDef : VAR VarDefList SEMICOLONVarDefList : VarDefList SEMICOLON VarDefStateVarDefList : VarDefStateVarDefState : VarList COLON TypeVarDefState : ArrayDefStateVarList : VarList COMMA VariableVarList : VariableArrayDefState : TYPE arrayName EQ ARRAY LBRAC index_list RBRAC OF TypearrayName : IDindex_list : index_list COMMA indexindex_list : indexindex : startIndex DOTDOT endIndexType : INTEGERType : REALType : BOOLEANType : arrayNameVariable : IDstartIndex : constendIndex : constStateList : StateList SEMICOLON StatementStateList : StatementStatement : open_statementStatement : closed_statementopen_statement : label COLON non_labeled_open_statementopen_statement : non_labeled_open_statementclosed_statement : label COLON non_labeled_closed_statementclosed_statement : non_labeled_closed_statementnon_labeled_open_statement : open_if_statementnon_labeled_open_statement : open_while_statementnon_labeled_open_statement : open_for_statementnon_labeled_closed_statement : assignment_statementnon_labeled_closed_statement : compound_statementnon_labeled_closed_statement : closed_if_statementnon_labeled_closed_statement : closed_while_statementnon_labeled_closed_statement : closed_for_statementnon_labeled_closed_statement : goto_statementnon_labeled_closed_statement : emptynon_labeled_closed_statement : case_statementcase_statement : CASE case_index OF case_element_list ENDcase_statement : CASE case_index OF case_element_list SEMICOLON ENDcase_index : Exprcase_element_list : case_element_list SEMICOLON case_elementcase_element_list : case_elementcase_element : case_constant COLON Statementcase_constant : constopen_if_statement : IF BoolExpr THEN Statementopen_if_statement : IF BoolExpr THEN closed_statement ELSE open_statementclosed_if_statement : IF BoolExpr THEN closed_statement ELSE closed_statementopen_while_statement : WHILE BoolExpr DO open_statementclosed_while_statement : WHILE BoolExpr DO closed_statementopen_for_statement : FOR Variable ASSIGNMENT initial_value direction final_value DO open_statementclosed_for_statement : FOR Variable ASSIGNMENT initial_value direction final_value DO closed_statementinitial_value : Exprfinal_value : Exprdirection : TOdirection : DOWNTOassignment_statement : Variable ASSIGNMENT Exprcompound_statement : BEGIN StateList ENDgoto_statement : GOTO labellabel : DIGSEQExpr : Expr PLUS ExprExpr : Expr MINUS ExprExpr : Expr TIMES ExprExpr : Expr DIVIDE ExprExpr : LPAREN Expr RPARENExpr : MINUS Expr %prec UMINUSExpr : VariableExpr : constconst : INT_NUMBERconst : REAL_NUMBERBoolExpr : Expr LT ExprBoolExpr : Expr LE ExprBoolExpr : Expr GT ExprBoolExpr : Expr GE ExprBoolExpr : Expr EQ ExprBoolExpr : Expr NE ExprBoolExpr : BoolExpr AND BoolExprBoolExpr : BoolExpr OR BoolExprBoolExpr : NOT BoolExprBoolExpr : LPAREN BoolExpr RPARENBoolExpr : Exprempty : function_definition : function_heading SEMICOLON function_blockfunction_definition : emptyfunction_heading : FUNCTION funcName COLON return_typefunction_heading : FUNCTION funcName parameter_list COLON return_typeparameter_list : LPAREN VarDefList RPARENfuncName : IDreturn_type : Typefunction_block : compound_statement'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,7,12,18,21,25,26,27,49,50,51,54,57,59,69,70,73,74,75,82,86,89,95,96,97,98,99,100,101,102,103,104,105,106,107,112,113,119,121,125,126,154,155,158,159,160,163,167,170,171,177,183,185,186,190,],[3,19,24,29,19,19,29,19,19,19,19,19,29,19,19,19,19,19,19,19,19,29,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-57,-58,19,19,19,19,29,19,19,19,19,]),'SEMICOLON':([3,10,13,14,16,19,21,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,60,61,62,63,64,65,68,69,70,76,77,78,79,83,87,88,90,92,93,94,95,111,112,114,117,122,123,135,136,137,138,140,141,142,145,146,154,155,161,163,167,168,169,170,174,175,176,181,183,184,185,187,188,190,],[4,22,25,-5,-7,-19,-84,-11,69,-23,-24,-25,-27,-29,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-4,-6,-15,-16,-17,-18,-60,-84,-84,-69,-70,-71,-72,-61,-87,-91,119,-22,-26,-28,-84,-68,-84,-59,-88,-48,-25,-63,-64,-65,-66,-67,-51,-52,162,-45,-84,-84,-41,-84,-84,-50,-49,-84,-42,-44,-46,-25,-84,-10,-84,-53,-54,-84,]),'VAR':([4,],[7,]),'ENDPOINT':([5,20,68,],[8,-2,-60,]),'FUNCTION':([6,25,],[12,-3,]),'BEGIN':([6,9,11,21,22,25,55,56,68,69,70,95,112,154,155,163,167,170,183,185,190,],[-84,21,-86,21,21,-3,-85,-92,-60,21,21,21,21,21,21,21,21,21,21,21,21,]),'TYPE':([7,25,59,119,],[18,18,18,18,]),'RPAREN':([14,16,19,29,60,61,62,63,64,65,72,76,77,78,79,90,108,109,110,111,116,127,128,129,130,131,132,133,134,135,136,137,138,139,140,184,],[-5,-7,-19,-11,-4,-6,-15,-16,-17,-18,-83,-69,-70,-71,-72,118,-81,139,140,-68,140,-79,-80,-73,-74,-75,-76,-77,-78,-63,-64,-65,-66,-82,-67,-10,]),'COLON':([15,17,19,23,24,34,37,58,66,78,79,118,124,147,148,],[26,-9,-19,57,-90,70,-62,89,-8,-71,-72,-89,155,163,-47,]),'COMMA':([15,17,19,66,78,79,149,150,178,179,180,],[27,-9,-19,-8,-71,-72,165,-13,-12,-14,-21,]),'ASSIGNMENT':([19,52,81,157,],[-19,82,113,171,]),'LT':([19,72,76,77,78,79,110,111,135,136,137,138,140,],[-19,98,-69,-70,-71,-72,98,-68,-63,-64,-65,-66,-67,]),'LE':([19,72,76,77,78,79,110,111,135,136,137,138,140,],[-19,99,-69,-70,-71,-72,99,-68,-63,-64,-65,-66,-67,]),'GT':([19,72,76,77,78,79,110,111,135,136,137,138,140,],[-19,100,-69,-70,-71,-72,100,-68,-63,-64,-65,-66,-67,]),'GE':([19,72,76,77,78,79,110,111,135,136,137,138,140,],[-19,101,-69,-70,-71,-72,101,-68,-63,-64,-65,-66,-67,]),'EQ':([19,28,29,72,76,77,78,79,110,111,135,136,137,138,140,],[-19,67,-11,102,-69,-70,-71,-72,102,-68,-63,-64,-65,-66,-67,]),'NE':([19,72,76,77,78,79,110,111,135,136,137,138,140,],[-19,103,-69,-70,-71,-72,103,-68,-63,-64,-65,-66,-67,]),'PLUS':([19,72,76,77,78,79,85,110,111,114,116,129,130,131,132,133,134,135,136,137,138,140,144,173,],[-19,104,-69,-70,-71,-72,104,104,-68,104,104,104,104,104,104,104,104,-63,-64,-65,-66,-67,104,104,]),'MINUS':([19,49,50,54,72,73,74,75,76,77,78,79,82,85,86,96,97,98,99,100,101,102,103,104,105,106,107,110,111,113,114,116,121,125,129,130,131,132,133,134,135,136,137,138,140,144,158,159,160,171,173,186,],[-19,75,75,75,105,75,75,75,-69,-70,-71,-72,75,105,75,75,75,75,75,75,75,75,75,75,75,75,75,105,-68,75,105,105,75,75,105,105,105,105,105,105,-63,-64,-65,-66,-67,105,75,-57,-58,75,105,75,]),'TIMES':([19,72,76,77,78,79,85,110,111,114,116,129,130,131,132,133,134,135,136,137,138,140,144,173,],[-19,106,-69,-70,-71,-72,106,106,-68,106,106,106,106,106,106,106,106,106,106,-65,-66,-67,106,106,]),'DIVIDE':([19,72,76,77,78,79,85,110,111,114,116,129,130,131,132,133,134,135,136,137,138,140,144,173,],[-19,107,-69,-70,-71,-72,107,107,-68,107,107,107,107,107,107,107,107,107,107,-65,-66,-67,107,107,]),'THEN':([19,71,72,76,77,78,79,108,111,127,128,129,130,131,132,133,134,135,136,137,138,139,140,153,],[-19,95,-83,-69,-70,-71,-72,-81,-68,-79,-80,-73,-74,-75,-76,-77,-78,-63,-64,-65,-66,-82,-67,167,]),'AND':([19,71,72,76,77,78,79,80,108,109,110,111,127,128,129,130,131,132,133,134,135,136,137,138,139,140,153,156,],[-19,96,-83,-69,-70,-71,-72,96,96,96,-83,-68,96,96,-73,-74,-75,-76,-77,-78,-63,-64,-65,-66,-82,-67,96,96,]),'OR':([19,71,72,76,77,78,79,80,108,109,110,111,127,128,129,130,131,132,133,134,135,136,137,138,139,140,153,156,],[-19,97,-83,-69,-70,-71,-72,97,97,97,-83,-68,97,97,-73,-74,-75,-76,-77,-78,-63,-64,-65,-66,-82,-67,97,97,]),'DO':([19,72,76,77,78,79,80,108,111,127,128,129,130,131,132,133,134,135,136,137,138,139,140,156,172,173,189,],[-19,-83,-69,-70,-71,-72,112,-81,-68,-79,-80,-73,-74,-75,-76,-77,-78,-63,-64,-65,-66,-82,-67,170,183,-56,190,]),'OF':([19,76,77,78,79,84,85,111,135,136,137,138,140,164,],[-19,-69,-70,-71,-72,115,-43,-68,-63,-64,-65,-66,-67,177,]),'END':([19,21,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,68,69,70,76,77,78,79,83,92,93,94,95,111,112,114,122,123,135,136,137,138,140,141,142,145,146,154,155,161,162,163,167,168,169,170,174,175,176,181,183,185,187,188,190,],[-19,-84,68,-23,-24,-25,-27,-29,-62,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-60,-84,-84,-69,-70,-71,-72,-61,-22,-26,-28,-84,-68,-84,-59,-48,-25,-63,-64,-65,-66,-67,-51,-52,161,-45,-84,-84,-41,174,-84,-84,-50,-49,-84,-42,-44,-46,-25,-84,-84,-53,-54,-84,]),'ELSE':([19,36,37,41,42,43,44,45,46,47,48,68,70,76,77,78,79,83,94,95,111,112,114,123,135,136,137,138,140,142,154,155,161,167,168,170,174,181,183,185,188,190,],[-19,-29,-62,-33,-34,-35,-36,-37,-38,-39,-40,-60,-84,-69,-70,-71,-72,-61,-28,-84,-68,-84,-59,154,-63,-64,-65,-66,-67,-52,-84,-84,-41,-84,-50,-84,-42,185,-84,-84,-54,-84,]),'TO':([19,76,77,78,79,111,135,136,137,138,140,143,144,182,],[-19,-69,-70,-71,-72,-68,-63,-64,-65,-66,-67,159,-55,159,]),'DOWNTO':([19,76,77,78,79,111,135,136,137,138,140,143,144,182,],[-19,-69,-70,-71,-72,-68,-63,-64,-65,-66,-67,160,-55,160,]),'DIGSEQ':([21,53,69,95,112,154,163,167,170,183,185,190,],[37,37,37,37,37,37,37,37,37,37,37,37,]),'IF':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[49,49,49,121,49,49,121,49,121,121,49,121,121,]),'WHILE':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[50,50,50,125,50,50,125,50,125,125,50,125,125,]),'FOR':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[51,51,51,126,51,51,126,51,126,126,51,126,126,]),'GOTO':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[53,53,53,53,53,53,53,53,53,53,53,53,53,]),'CASE':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[54,54,54,54,54,54,54,54,54,54,54,54,54,]),'LPAREN':([23,24,49,50,54,73,74,75,82,86,96,97,98,99,100,101,102,103,104,105,106,107,113,121,125,158,159,160,171,186,],[59,-90,74,74,86,74,74,86,86,86,74,74,86,86,86,86,86,86,86,86,86,86,86,74,74,86,-57,-58,86,86,]),'INTEGER':([26,57,89,177,],[62,62,62,62,]),'REAL':([26,57,89,177,],[63,63,63,63,]),'BOOLEAN':([26,57,89,177,],[64,64,64,64,]),'NOT':([49,50,73,74,96,97,121,125,],[73,73,73,73,73,73,73,73,]),'INT_NUMBER':([49,50,54,73,74,75,82,86,96,97,98,99,100,101,102,103,104,105,106,107,113,115,120,121,125,158,159,160,162,165,166,171,186,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-57,-58,78,78,78,78,78,]),'REAL_NUMBER':([49,50,54,73,74,75,82,86,96,97,98,99,100,101,102,103,104,105,106,107,113,115,120,121,125,158,159,160,162,165,166,171,186,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-57,-58,79,79,79,79,79,]),'ARRAY':([67,],[91,]),'DOTDOT':([78,79,151,152,],[-71,-72,166,-20,]),'RBRAC':([78,79,149,150,178,179,180,],[-71,-72,164,-13,-12,-14,-21,]),'LBRAC':([91,],[120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ProgDef':([0,],[1,]),'SubProg':([4,],[5,]),'VarDef':([4,],[6,]),'function_definition':([6,],[9,]),'function_heading':([6,],[10,]),'empty':([6,21,69,70,95,112,154,155,163,167,170,183,185,190,],[11,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'VarDefList':([7,59,],[13,90,]),'VarDefState':([7,25,59,119,],[14,60,14,60,]),'VarList':([7,25,59,119,],[15,15,15,15,]),'ArrayDefState':([7,25,59,119,],[16,16,16,16,]),'Variable':([7,21,25,27,49,50,51,54,59,69,70,73,74,75,82,86,95,96,97,98,99,100,101,102,103,104,105,106,107,112,113,119,121,125,126,154,155,158,163,167,170,171,183,185,186,190,],[17,52,17,66,76,76,81,76,17,52,52,76,76,76,76,76,52,76,76,76,76,76,76,76,76,76,76,76,76,52,76,17,76,76,157,52,52,76,52,52,52,76,52,52,76,52,]),'compound_statement':([9,21,22,69,70,95,112,154,155,163,167,170,183,185,190,],[20,42,56,42,42,42,42,42,42,42,42,42,42,42,42,]),'funcName':([12,],[23,]),'arrayName':([18,26,57,89,177,],[28,65,65,65,65,]),'StateList':([21,],[30,]),'Statement':([21,69,95,163,167,],[31,92,122,176,122,]),'open_statement':([21,69,95,112,154,163,167,170,183,185,190,],[32,32,32,141,169,32,32,141,187,169,187,]),'closed_statement':([21,69,95,112,154,163,167,170,183,185,190,],[33,33,123,142,168,33,181,142,188,168,188,]),'label':([21,53,69,95,112,154,163,167,170,183,185,190,],[34,83,34,124,34,34,34,124,124,34,124,124,]),'non_labeled_open_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[35,35,93,35,35,35,93,35,35,35,35,35,35,]),'non_labeled_closed_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[36,36,94,36,36,36,94,36,36,36,36,36,36,]),'open_if_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[38,38,38,38,38,38,38,38,38,38,38,38,38,]),'open_while_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[39,39,39,39,39,39,39,39,39,39,39,39,39,]),'open_for_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[40,40,40,40,40,40,40,40,40,40,40,40,40,]),'assignment_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'closed_if_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[43,43,43,43,43,43,43,43,43,43,43,43,43,]),'closed_while_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'closed_for_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[45,45,45,45,45,45,45,45,45,45,45,45,45,]),'goto_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[46,46,46,46,46,46,46,46,46,46,46,46,46,]),'case_statement':([21,69,70,95,112,154,155,163,167,170,183,185,190,],[48,48,48,48,48,48,48,48,48,48,48,48,48,]),'function_block':([22,],[55,]),'parameter_list':([23,],[58,]),'Type':([26,57,89,177,],[61,88,88,184,]),'BoolExpr':([49,50,73,74,96,97,121,125,],[71,80,108,109,127,128,153,156,]),'Expr':([49,50,54,73,74,75,82,86,96,97,98,99,100,101,102,103,104,105,106,107,113,121,125,158,171,186,],[72,72,85,72,110,111,114,116,72,72,129,130,131,132,133,134,135,136,137,138,144,72,72,173,144,173,]),'const':([49,50,54,73,74,75,82,86,96,97,98,99,100,101,102,103,104,105,106,107,113,115,120,121,125,158,162,165,166,171,186,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,148,152,77,77,77,148,152,180,77,77,]),'case_index':([54,],[84,]),'return_type':([57,89,],[87,117,]),'initial_value':([113,171,],[143,182,]),'case_element_list':([115,],[145,]),'case_element':([115,162,],[146,175,]),'case_constant':([115,162,],[147,147,]),'index_list':([120,],[149,]),'index':([120,165,],[150,178,]),'startIndex':([120,165,],[151,151,]),'direction':([143,182,],[158,186,]),'final_value':([158,186,],[172,189,]),'endIndex':([166,],[179,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ProgDef","S'",1,None,None,None),
  ('ProgDef -> PROGRAM ID SEMICOLON SubProg ENDPOINT','ProgDef',5,'p_ProgDef','parser.py',43),
  ('SubProg -> VarDef function_definition compound_statement','SubProg',3,'p_SubProg','parser.py',48),
  ('VarDef -> VAR VarDefList SEMICOLON','VarDef',3,'p_VarDef','parser.py',130),
  ('VarDefList -> VarDefList SEMICOLON VarDefState','VarDefList',3,'p_VarDefList_1','parser.py',135),
  ('VarDefList -> VarDefState','VarDefList',1,'p_VarDefList_2','parser.py',140),
  ('VarDefState -> VarList COLON Type','VarDefState',3,'p_VarDefState_1','parser.py',145),
  ('VarDefState -> ArrayDefState','VarDefState',1,'p_VarDefState_2','parser.py',150),
  ('VarList -> VarList COMMA Variable','VarList',3,'p_VarList_1','parser.py',155),
  ('VarList -> Variable','VarList',1,'p_VarList_2','parser.py',160),
  ('ArrayDefState -> TYPE arrayName EQ ARRAY LBRAC index_list RBRAC OF Type','ArrayDefState',9,'p_ArrayDefState','parser.py',165),
  ('arrayName -> ID','arrayName',1,'p_arrayName','parser.py',170),
  ('index_list -> index_list COMMA index','index_list',3,'p_index_list_1','parser.py',175),
  ('index_list -> index','index_list',1,'p_index_list_2','parser.py',180),
  ('index -> startIndex DOTDOT endIndex','index',3,'p_index','parser.py',185),
  ('Type -> INTEGER','Type',1,'p_type_1','parser.py',190),
  ('Type -> REAL','Type',1,'p_type_2','parser.py',194),
  ('Type -> BOOLEAN','Type',1,'p_type_3','parser.py',198),
  ('Type -> arrayName','Type',1,'p_type_4','parser.py',202),
  ('Variable -> ID','Variable',1,'p_variable_id','parser.py',206),
  ('startIndex -> const','startIndex',1,'p_startIndex','parser.py',212),
  ('endIndex -> const','endIndex',1,'p_endIndex','parser.py',216),
  ('StateList -> StateList SEMICOLON Statement','StateList',3,'p_statementList_1','parser.py',294),
  ('StateList -> Statement','StateList',1,'p_statementList_2','parser.py',299),
  ('Statement -> open_statement','Statement',1,'p_statement_1','parser.py',304),
  ('Statement -> closed_statement','Statement',1,'p_statement_2','parser.py',308),
  ('open_statement -> label COLON non_labeled_open_statement','open_statement',3,'p_open_statement_1','parser.py',312),
  ('open_statement -> non_labeled_open_statement','open_statement',1,'p_open_statement_2','parser.py',317),
  ('closed_statement -> label COLON non_labeled_closed_statement','closed_statement',3,'p_closed_statement_1','parser.py',321),
  ('closed_statement -> non_labeled_closed_statement','closed_statement',1,'p_closed_statement_2','parser.py',326),
  ('non_labeled_open_statement -> open_if_statement','non_labeled_open_statement',1,'p_non_labeled_open_statement_1','parser.py',330),
  ('non_labeled_open_statement -> open_while_statement','non_labeled_open_statement',1,'p_non_labeled_open_statement_2','parser.py',334),
  ('non_labeled_open_statement -> open_for_statement','non_labeled_open_statement',1,'p_non_labeled_open_statement_3','parser.py',338),
  ('non_labeled_closed_statement -> assignment_statement','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_1','parser.py',342),
  ('non_labeled_closed_statement -> compound_statement','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_2','parser.py',347),
  ('non_labeled_closed_statement -> closed_if_statement','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_3','parser.py',352),
  ('non_labeled_closed_statement -> closed_while_statement','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_4','parser.py',357),
  ('non_labeled_closed_statement -> closed_for_statement','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_5','parser.py',362),
  ('non_labeled_closed_statement -> goto_statement','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_6','parser.py',367),
  ('non_labeled_closed_statement -> empty','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_7','parser.py',372),
  ('non_labeled_closed_statement -> case_statement','non_labeled_closed_statement',1,'p_non_labeled_closed_statement_8','parser.py',378),
  ('case_statement -> CASE case_index OF case_element_list END','case_statement',5,'p_case_statement_1','parser.py',390),
  ('case_statement -> CASE case_index OF case_element_list SEMICOLON END','case_statement',6,'p_case_statement_2','parser.py',395),
  ('case_index -> Expr','case_index',1,'p_case_index','parser.py',400),
  ('case_element_list -> case_element_list SEMICOLON case_element','case_element_list',3,'p_case_element_list_1','parser.py',404),
  ('case_element_list -> case_element','case_element_list',1,'p_case_element_list_2','parser.py',409),
  ('case_element -> case_constant COLON Statement','case_element',3,'p_case_element','parser.py',414),
  ('case_constant -> const','case_constant',1,'p_case_constant','parser.py',419),
  ('open_if_statement -> IF BoolExpr THEN Statement','open_if_statement',4,'p_open_if_statement_1','parser.py',424),
  ('open_if_statement -> IF BoolExpr THEN closed_statement ELSE open_statement','open_if_statement',6,'p_open_if_statement_2','parser.py',429),
  ('closed_if_statement -> IF BoolExpr THEN closed_statement ELSE closed_statement','closed_if_statement',6,'p_closed_if_statement','parser.py',434),
  ('open_while_statement -> WHILE BoolExpr DO open_statement','open_while_statement',4,'p_open_while_statement','parser.py',439),
  ('closed_while_statement -> WHILE BoolExpr DO closed_statement','closed_while_statement',4,'p_closed_while_statement','parser.py',444),
  ('open_for_statement -> FOR Variable ASSIGNMENT initial_value direction final_value DO open_statement','open_for_statement',8,'p_open_for_statement','parser.py',449),
  ('closed_for_statement -> FOR Variable ASSIGNMENT initial_value direction final_value DO closed_statement','closed_for_statement',8,'p_closed_for_statement','parser.py',454),
  ('initial_value -> Expr','initial_value',1,'p_initial_value','parser.py',459),
  ('final_value -> Expr','final_value',1,'p_final_value','parser.py',463),
  ('direction -> TO','direction',1,'p_direction_1','parser.py',467),
  ('direction -> DOWNTO','direction',1,'p_direction_2','parser.py',471),
  ('assignment_statement -> Variable ASSIGNMENT Expr','assignment_statement',3,'p_assignment_statement','parser.py',475),
  ('compound_statement -> BEGIN StateList END','compound_statement',3,'p_compound_statement','parser.py',480),
  ('goto_statement -> GOTO label','goto_statement',2,'p_goto_statement','parser.py',487),
  ('label -> DIGSEQ','label',1,'p_label','parser.py',492),
  ('Expr -> Expr PLUS Expr','Expr',3,'p_expression_plus','parser.py',566),
  ('Expr -> Expr MINUS Expr','Expr',3,'p_expression_minus','parser.py',571),
  ('Expr -> Expr TIMES Expr','Expr',3,'p_expression_times','parser.py',576),
  ('Expr -> Expr DIVIDE Expr','Expr',3,'p_expression_div','parser.py',581),
  ('Expr -> LPAREN Expr RPAREN','Expr',3,'p_expr_Parentheses','parser.py',586),
  ('Expr -> MINUS Expr','Expr',2,'p_expression_uminus','parser.py',590),
  ('Expr -> Variable','Expr',1,'p_expression_variable','parser.py',595),
  ('Expr -> const','Expr',1,'p_expression_const','parser.py',599),
  ('const -> INT_NUMBER','const',1,'p_const_INT_NUMBER','parser.py',604),
  ('const -> REAL_NUMBER','const',1,'p_const_REAL_NUMBER','parser.py',608),
  ('BoolExpr -> Expr LT Expr','BoolExpr',3,'p_BoolExpr_LT','parser.py',621),
  ('BoolExpr -> Expr LE Expr','BoolExpr',3,'p_BoolExpr_LE','parser.py',627),
  ('BoolExpr -> Expr GT Expr','BoolExpr',3,'p_BoolExpr_GT','parser.py',633),
  ('BoolExpr -> Expr GE Expr','BoolExpr',3,'p_BoolExpr_GE','parser.py',639),
  ('BoolExpr -> Expr EQ Expr','BoolExpr',3,'p_BoolExpr_EQ','parser.py',645),
  ('BoolExpr -> Expr NE Expr','BoolExpr',3,'p_BoolExpr_NE','parser.py',651),
  ('BoolExpr -> BoolExpr AND BoolExpr','BoolExpr',3,'p_BoolExpr_AND','parser.py',657),
  ('BoolExpr -> BoolExpr OR BoolExpr','BoolExpr',3,'p_BoolExpr_OR','parser.py',663),
  ('BoolExpr -> NOT BoolExpr','BoolExpr',2,'p_BoolExpr_NOT','parser.py',669),
  ('BoolExpr -> LPAREN BoolExpr RPAREN','BoolExpr',3,'p_BoolExpr_Parentheses','parser.py',675),
  ('BoolExpr -> Expr','BoolExpr',1,'p_BoolExpr','parser.py',679),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',687),
  ('function_definition -> function_heading SEMICOLON function_block','function_definition',3,'p_function_definition_1','parser.py',702),
  ('function_definition -> empty','function_definition',1,'p_function_definition_2','parser.py',707),
  ('function_heading -> FUNCTION funcName COLON return_type','function_heading',4,'p_function_heading_1','parser.py',711),
  ('function_heading -> FUNCTION funcName parameter_list COLON return_type','function_heading',5,'p_function_heading_2','parser.py',716),
  ('parameter_list -> LPAREN VarDefList RPAREN','parameter_list',3,'p_parameter_list','parser.py',721),
  ('funcName -> ID','funcName',1,'p_funcName','parser.py',725),
  ('return_type -> Type','return_type',1,'p_return_type','parser.py',729),
  ('function_block -> compound_statement','function_block',1,'p_function_block','parser.py',733),
]
